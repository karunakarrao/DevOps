$ kubectl version --> to check the kubernetes version

$ kubectl explain <Object-name> --> Documentation for resource object (Pod, Replicaset, Deployment, service, etc.)
examples:
    $ kubectl explain pod --> Documentation for POD. to check apiVersion of k8s object.
    $ kubectl explain replicaset/rs --> Documentation for Replicaset
    $ kubectl explain replicationcontroller/rc --> Doc. for RC
    $ kubectl explain deployment/deploy --> doc for deployment
    $ kubectl explain service/svc --> doc for service

Kubernetes objects (Pod,Replicasets,Deployments,service,etc) are created in two types.
    1. imperative --> objects created using command line are called imperative.
    2. declarative --> objects created using yml/programing are called declarative.

POD:
====
Syntax: Imperative way
$ kubectl run {...} --> only used to create pod object 
$ kubectl run <Pod-Name> --image=<Pod-image-name>  --> to run a pod 
Examples:
$ kubectl run nginx --image=nginx --> creating a nginx pod
$ kubectl run redis --image=redis --> creating a redis pod
    
Syntax: Declarative way
$ kubectl create -f pod-definition.yaml 

pod-definition.yaml--> POD-definition file in YAML format :
-----------------------------------------------------------
apiVersion: v1
kind: Pod
metadata: 
    name: nginx-pod
    labels:
        app: nginx
spec: 
    containers:
    - name: nignx
      image: nginx
-------------------------------------------------------------

$ kubectl get pods --> to list pods running on default namespace
$ kubectl get pods  -w --> to watch the pod status on fly
$ kubectl get all --> to list all objects(Pod, Replicasets, Deploylments, services, etc.) running in default namespace
$ kubectl get pods -n prod1-namespace  -> to list the pods running on the namespace prod1-namespace
(or)
$ kubectl get pods --namespace=prod1-namespace
$ kubectl get all --namespace=kube-system --> to list "kube-system" namespace objects, kubernetes object namespace

examples:
$ kubectl get pods
$ kubectl get replicationcontrollers
$ kubectl get replicasets
$ kubectl get deployments
$ kubectl get services
$ kubectl get namespaces
$ kubectl get daemonsets

$ kubectl describe pod <pod-name> --> to see the details of pod and properties
example:
$ kubectl describe pod my-pod1
$ kubectl describe pods
$ kubectl describe replicaset my-replicaset1
$ kubectl describe replicasets
$ kubectl describe deployment my-deployment1
$ kubectl describe deployments
$ kubectl describe daemonsets --namespace=kube-system
$ kubectl describe -n kube-system daemonsets    --> -n is namespace 

ReplicationController:
======================

replicationcontroller-definition.yaml --> with help of this YAML file we replicate n times. same pod used in pod-definition.yaml :
----------------------------------------------------------------------------------------------------------------------------------
apiVersion: v1
kind: ReplicationController
metadata:
    name: my-rc
    labels:
        app: my-rc-nginx
spec:
    replicas: 3
    template:
        metadata: 
            name: nginx-pod
            labels:
                app: nginx
        spec: 
            containers:
            - name: nignx
              image: nginx
---------------------------------------------------------------------------------------------------------------------------------
Create: ReplicationController
=============================
$ kubectl create -f replicationcontroller-definition.yaml
$ kubectl get replicaitoncontroller
(or)
$ kubectl get rc
$ kubectl delete rc my-rc1
$ kubectl describe rc my-rc1
$ kubectl edit rc my-rc1
$ kubectl replace -f replicationcontroller-definiton.v2.yaml

Replicaset:
===========
ReplicationController and ReplicaSet are used for similer functionality. ReplicationController is older version, ReplicaSet is the newer version.

replicaset-definition.yaml
-------------------------------------------------------------------------------------
apiVersion: apps/v1
kind: ReplicaSet
metadata:
    name: my-rs
    labels:
        app: my-rs-nginx
spec:
    template:
        metadata: 
            name: nginx-pod
            labels:
                app: nginx
        spec: 
            containers:
            - name: nignx
              image: nginx
    selector:
        matchLabels:
            app: nginx    
    replicas: 5
-----------------------------------------------------------------------------------
Create: ReplicaSet
==================
$ kubectl create -f replicaset-definition.v1.yaml --dry-run=client --> to run the YAML file with out applying the changes
$ kubectl create -f replicaset-definition.v1.yaml   --> create replicaset
$ kubectl get replicaset    --> list replicasets
(or)
$ kubectl get rs    --> list replicasets 
$ kubectl describe replicaset my-rs --> describe replicaset properties
$ kubectl replace -f replicaset-definition.v2.yaml  --> replace the replicaset with latest version
$ kubectl scale replicaset my-rs --replicas=10  --> scale up number of replicas 
(or)
$ kubectl scale -f replicaset-definition.yaml --replicas=10 --> scale up number of replicas using replicaset definition file
$ kubectl scale -f replicaset-definition.yaml --replicas=2 --> scale down number of replicas
$ kubectl edit replicaset my-rs   --> edit the replicaset properties using the 
$ kubectl explain replicaset|grep -i version
$ kubectl delete replicaset my-rs --> to delete replicaset my-rs

Deployment:
===========
deployment-definition.yaml --> this deployment YAML file creates PODs, Replicasets, Deployment objects
-------------------------------------------------------------------------------------------------------
apiVersion: apps/v1
kind: Deployment
metadata: 
    name: my-deploy
spec:
    replicas: 5
    selector:
        matchLabels:
            app: nginx
    template:
        metadata:
            name: nginx-pod
            labels:
                app: nginx
        spec:
            containers:
            - name: nginx
              image: nginx
------------------------------------------------------------------------------------------------------
Create: Deployment:
===================
$ kubectl create -f deployment-definition.yaml --dry-run=client --> to trial run the YAML file, if will not apply any changes
$ kubectl create -f deployment-definition.yaml --> to exicute the YAML file.
(or)
$ kubectl apply -f deployment-definition.yaml --> 
$ kubectl get deployment    --> to check deployments available
(or)
$ kubectl get deploy --> to check deployments available
$ kubectl get deployment my-deply --> to check one deployment my-deploy
$ kubectl get deployment --namespace=dev --> to check the deploymets running on namespace "dev"
$ kubectl describe deployment my-deploy 
$ kubectl delete deployment my-deploy
$ kubectl edit deployment my-deploy --> update the version by editing the running deployment.

deployment rollout is done in two ways 
    1. rollingupdate (Default) --> it will bringdown one by one depends on RollingUpdateStrategy defined. 
    2. recreate --> will bringdown all pods at a time, and brinup all 

Update: Deployment
==================
$ kubectl apply -f deployment-definition.v2.yaml --> to update the latest version of application.
$ kubectl replace -f deployment-definition.v2.yaml --> updating the app version(nginx to nginx:1.16.2) using the YAML and replace with running deployment.
$ kubectl set image deployment my-deploy nginx=nginx:1.16.1 --> to set the latest nginx image on the running deployment
$ kubectl rollout history deployment my-deploy --> history of the number of deployments
$ kubectl rollout status deployment my-deploy --> deployment status can be checked. 
$ kubectl rollout undo deployment my-deploy --> if update is failed for some reason, then rollout the new-version deployment to the old-verison deployment 
$ kubectl scale deployment my-deploy --replicas=10 --> to scale up the deployment
$ kubectl scale deployment my-deploy --replicas=3 --> to scale down the deployment

Note: remember every time new-verison changed, respective "replicaset" is brought down parallel a new "replicaset" is created with new-verison, the old replicasets
will avaiable but not pods will be avaiable in running state. when you do the undo operation thet old replicaset is recreated and new one will go down.

Service:
========
Service is a k8s object, which exposes the sevice to the outside network. this can be done in two ways. by using the command line parameter "expose" we can expose
the service to the outside network.

$ kubectl expose deployment my-deploy --port=8080


