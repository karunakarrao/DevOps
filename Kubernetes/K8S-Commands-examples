$ kubectl version --> to check the kubernetes version
$ kubectl explain <Object-name> --> Documentation for resource object (Pod, Replicaset, Deployment, service, etc.)
examples:
    $ kubectl explain pod --> Documentation for POD. to check apiVersion of k8s object.
    $ kubectl explain replicaset/rs --> Documentation for Replicaset
    $ kubectl explain replicationcontroller/rc --> Doc. for RC
    $ kubectl explain deployment/deploy --> doc for deployment
    $ kubectl explain service/svc --> doc for service

Kubernetes objects (Pod,Replicasets,Deployments,service,etc) are created in two types.
    1. imperative --> objects created using command line are called imperative.
    2. declarative --> objects created using yml/programing are called declarative.

POD:
====
Syntax: Imperative way
$ kubectl run {...} --> only used to create pod object 
$ kubectl run <Pod-Name> --image=<Pod-image-name>  --> to run a pod 
Examples:
$ kubectl run nginx --image=nginx --> creating a nginx pod
$ kubectl run redis --image=redis --> creating a redis pod
    
Syntax: Declarative way
$ kubectl create -f pod-definition.yaml 

pod-definition.yaml--> POD-definition file in YAML format :
-----------------------------------------------------------
apiVersion: v1
kind: Pod
metadata: 
    name: nginx-pod
    labels:
        app: nginx
spec: 
    containers:
    - name: nignx
      image: nginx
-------------------------------------------------------------

$ kubectl get pods --> to list pods running on default namespace
$ kubectl get all --> to list all objects(Pod, Replicasets, Deploylments, services, etc.) running in default namespace
$ kubectl get pods -n prod1-namespace  -> to list the pods running on the namespace prod1-namespace
(or)
$ kubectl get pods --namespace=prod1-namespace
$ kubectl get all --namespace=kube-system --> to list "kube-system" namespace objects, kubernetes object namespace

examples:
$ kubectl get pods
$ kubectl get replicationcontrollers
$ kubectl get replicasets
$ kubectl get deployments
$ kubectl get services
$ kubectl get namespaces
$ kubectl get daemonsets

$ kubectl describe pod <pod-name> --> to see the details of pod and properties
example:
$ kubectl describe pod my-pod1
$ kubectl describe pods
$ kubectl describe replicaset my-replicaset1
$ kubectl describe replicasets
$ kubectl describe deployment my-deployment1
$ kubectl describe deployments
$ kubectl describe daemonsets --namespace=kube-system
$ kubectl describe -n kube-system daemonsets    --> -n is namespace 

ReplicationController:
======================
$ kubectl create -f replicationcontroller-definition.yaml
replicationcontroller-definition.yaml --> with help of this YAML file we replicate n times. same pod used in pod-definition.yaml :
----------------------------------------------------------------------------------------------------------------------------------
apiVersion: v1
kind: ReplicationController
metadata:
    name: my-rc
    labels:
        app: my-rc-nginx
spec:
    replicas: 3
    template:
        metadata: 
            name: nginx-pod
            labels:
                app: nginx
        spec: 
            containers:
            - name: nignx
              image: nginx
---------------------------------------------------------------------------------------------------------------------------------
$ kubectl create -f replicationcontroller-definition.v1.yaml
$ kubectl get replicaitoncontroller
(or)
$ kubectl get rc
$ kubectl delete rc my-rc1
$ kubectl describe rc my-rc1
$ kubectl edit rc my-rc1
$ kubectl replace -f replicationcontroller-definiton.v2.yaml

Replicaset:
===========
ReplicationController and ReplicaSet are used for similer functionality. ReplicationController is older version, ReplicaSet is the newer version.

replicaset-definition.yaml
-------------------------------------------------------------------------------------
apiVersion: apps/v1
kind: ReplicaSet
metadata:
    name: my-rs
    labels:
        app: my-rs-nginx
spec:
    template:
        metadata: 
            name: nginx-pod
            labels:
                app: nginx
        spec: 
            containers:
            - name: nignx
              image: nginx
    selector:
        matchLabels:
            app: nginx    
    replicas: 5


