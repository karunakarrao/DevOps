
--------------------------------------------------------------------------------------------------
Kubernetes Objects:
--------------------------------------------------------------------------------------------------
K8s important paths:
--------------------
/etc/kubernetes/manifests/      --> all kubernetes YAML files are stored
/var/lib/kubelet/        --> 
~/.kube/config      --> user permission and access keys are available here 

kubectl : 
---------------------------------------------------------------
Basic Commands (Beginner):
  create          Create a resource from a file or from stdin
  expose          Take a replication controller, service, deployment or pod and expose it as a new Kubernetes service
  run             Run a particular image on the cluster
  set             Set specific features on objects

Basic Commands (Intermediate):
  explain         Get documentation for a resource
  get             Display one or many resources
  edit            Edit a resource on the server
  delete          Delete resources by file names, stdin, resources and names, or by resources and label selector

Deploy Commands:
  rollout         Manage the rollout of a resource
  scale           Set a new size for a deployment, replica set, or replication controller
  autoscale       Auto-scale a deployment, replica set, stateful set, or replication controller

Cluster Management Commands:
  certificate     Modify certificate resources.
  cluster-info    Display cluster information
  top             Display resource (CPU/memory) usage
  cordon          Mark node as unschedulable
  uncordon        Mark node as schedulable
  drain           Drain node in preparation for maintenance
  taint           Update the taints on one or more nodes

Troubleshooting and Debugging Commands:
  describe        Show details of a specific resource or group of resources
  logs            Print the logs for a container in a pod
  attach          Attach to a running container
  exec            Execute a command in a container
  port-forward    Forward one or more local ports to a pod
  proxy           Run a proxy to the Kubernetes API server
  cp              Copy files and directories to and from containers
  auth            Inspect authorization
  debug           Create debugging sessions for troubleshooting workloads and nodes
  events          List events

Advanced Commands:
  diff            Diff the live version against a would-be applied version
  apply           Apply a configuration to a resource by file name or stdin
  patch           Update fields of a resource
  replace         Replace a resource by file name or stdin
  wait            Experimental: Wait for a specific condition on one or many resources
  kustomize       Build a kustomization target from a directory or URL.

Settings Commands:
  label           Update the labels on a resource
  annotate        Update the annotations on a resource
  completion      Output shell completion code for the specified shell (bash, zsh, fish, or powershell)

Other Commands:
  alpha           Commands for features in alpha
  api-resources   Print the supported API resources on the server
  api-versions    Print the supported API versions on the server, in the form of "group/version"
  config          Modify kubeconfig files
  plugin          Provides utilities for interacting with plugins
  version         Print the client and server version information


commands:
-A, --all-namespaces
-o, --output  
-w, --watch
-l, --selector
--show-labels 
-f, --filename
----------------------------------------------------------------------------------
$ kubectl version

$ kubectl explain pod/replicaset/deployment/service/daemonset/etc... --> doc. for k8s objects

$ kubectl run nginx --image=nginx   --> run an "nginx" pod

$ kubectl get all     --> Lists all k8s objects running
$ kubectl get pod     --> Listst only pods, you can use rc,rs,deployments,service,configmaps, etc...
$ kubectl get pods -o wide            --> prints aditinal info like pod IP & Node name
$ kubectl get pods -o json            --> prints output in json format
$ kubectl get pods --show-labels      --> prints all labels 
$ kubectl get pods -w                 --> watch the pods change their states
$ kubectl get -f my-pod.yml           --> list only the objects defined in the file
$ kubectl get pods --selector app=my-rs     --> prints running objects with the selector 


$ kubectl create -f my-pod.v1.yaml    --> -f filename
$ kubectl edit pod my-pod             --> edit running pod
$ kubectl replace -f my-pod.v2.yaml   --> replace new version with old version
$ kubectl delete pod my-pod           --> delete the running pod
$ kubectl apply -f my-pod.v3.yaml     --> apply new changes, like replace 
$ kubectl 


$ kubectl expose pod nginx 
$ kubectl get pods 
$ kubectl describe pod my-pod 

-----------
apiVersion:
kind:
metadata:
  name:
  labels:
    app:
    env:
  namespace:
  annotations:
    author:
    email:
    phone:
spec:
  type: NodePort/ClusterIP/LoadBalancer
  replicas: 3
  nodeName: controlplane
  nodeSelector:
    env: UAT1
  tolerations:
  - key:"env"
    operator: "Equal"
    value: "UAT1"
    effect: "NoSchedule"
  strategy:
    type: RollingUpdate/Recreate
    rollingupdate:
      maxSurge: 25%
      maxUnavialable: 25%
  containers:
  volumes:


---------------------------------------------------------
NameSpace:
---------------------------------------------------------

$ kubectl get namespace
$ kubectl config view
$ kubectl config get-contexts
$ kubectl config set-context --current --namespace kube-system --> default namespace to kube-system namespace
$ kubectl create namespace dev  --> creates "dev" namespace with default values

Kubectx and Kubens – Command line Utilities
Throughout the course, you have had to work on several different namespaces in the practice lab environments. In some labs, you also had to switch between several contexts.

While this is excellent for hands-on practice, in a real “live” kubernetes cluster implemented for production, there could be a possibility of often switching between a large number of namespaces and clusters.

This can quickly become and confusing and overwhelming task if you had to rely on kubectl alone.

This is where command line tools such as kubectx and kubens come in to picture.

Reference: https://github.com/ahmetb/kubectx

Kubectx:

With this tool, you don’t have to make use of lengthy “kubectl config” commands to switch between contexts. This tool is particularly useful to switch context between clusters in a multi-cluster environment.

Installation:

sudo git clone https://github.com/ahmetb/kubectx /opt/kubectx
sudo ln -s /opt/kubectx/kubectx /usr/local/bin/kubectx

Syntax:

To list all contexts:

kubectx

To switch to a new context:

kubectx

To switch back to the previous context:

kubectx –

To see the current context:

kubectx -c

Kubens:

This tool allows users to switch between namespaces quickly with a simple command.

Installation:

sudo git clone https://github.com/ahmetb/kubectx /opt/kubectx
sudo ln -s /opt/kubectx/kubens /usr/local/bin/kubens

Syntax:

To switch to a new namespace:

kubens

To switch back to previous namespace:

kubens –

controlplane ~ ➜  cat freeze-app.sh 
nohup kubectl exec --namespace=kube-public curl -- wget -qO- http://webapp-service.default.svc.cluster.local:8080/freeze &

controlplane ~ ➜  cat curl-test.sh 
for i in {1..20}; do
   kubectl exec --namespace=kube-public curl -- sh -c 'test=`wget -qO- -T 2  http://webapp-service.default.svc.cluster.local:8080/ready 2>&1` && echo "$test OK" || echo "Failed"';
   echo ""
done
controlplane ~ ➜  cat crash-app.sh 
kubectl exec --namespace=kube-public curl -- wget -qO- http://webapp-service.default.svc.cluster.local:8080/crash

controlplane ~ ➜  


Questions:
---------------------------------------------------------------------------
Q. How to identify the dns solution implimented in the cluster? 
    $ kubectl -n kube-system describe  services
Q. Where is the configuration file located for configuring the CoreDNS service?
    $ kubectl describe deployments.apps 
Q. How is the Corefile passed into the CoreDNS POD?
Run the command: kubectl get cm -n kube-system and look at the coredns ConfigMap. It's passed through the ConfigMap volume in the deployment.
Q. What is the root domain/zone configured for this kubernetes cluster?
Run the command: kubectl describe configmap coredns -n kube-system and look for the entry after kubernetes.
Q. How to query a pod to get some output?
kubectl exec -it hr -- nslookup mysql.payroll > /root/CKA/nslookup.out
